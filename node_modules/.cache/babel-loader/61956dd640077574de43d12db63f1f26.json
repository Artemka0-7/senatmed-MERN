{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst usePagination = _ref => {\n  _s();\n\n  let {\n    contentPerPage,\n    count\n  } = _ref;\n  const [page, setPage] = useState(1); // number of pages in total (total items / content on each page)\n\n  const pageCount = Math.ceil(count / contentPerPage); // index of last item of current page\n\n  const lastContentIndex = page * contentPerPage; // index of first item of current page\n\n  const firstContentIndex = lastContentIndex - contentPerPage;\n\n  const changePage = direction => {\n    setPage(state => {\n      // move forward\n      if (direction) {\n        // if page is the last page, do nothing\n        if (state === pageCount) {\n          return state;\n        }\n\n        return state + 1; // go back\n      } else {\n        // if page is the first page, do nothing\n        if (state === 1) {\n          return state;\n        }\n\n        return state - 1;\n      }\n    });\n  };\n\n  const setPageSAFE = num => {\n    // if number is greater than number of pages, set to last page\n    if (num > pageCount) {\n      setPage(pageCount); // if number is less than 1, set page to first page\n    } else if (num < 1) {\n      setPage(1);\n    } else {\n      setPage(num);\n    }\n  };\n\n  return {\n    totalPages: pageCount,\n    nextPage: () => changePage(true),\n    prevPage: () => changePage(false),\n    setPage: setPageSAFE,\n    firstContentIndex,\n    lastContentIndex,\n    page\n  };\n};\n\n_s(usePagination, \"/DWZXlUKUNETkaaw7t58aXy53hg=\");\n\nexport default usePagination;","map":{"version":3,"names":["useState","usePagination","contentPerPage","count","page","setPage","pageCount","Math","ceil","lastContentIndex","firstContentIndex","changePage","direction","state","setPageSAFE","num","totalPages","nextPage","prevPage"],"sources":["C:/Users/79255/Desktop/senatmedReact/client/src/hooks/usePagination.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst usePagination = ({ contentPerPage, count }) => {\r\n  const [page, setPage] = useState(1);\r\n  // number of pages in total (total items / content on each page)\r\n  const pageCount = Math.ceil(count / contentPerPage);\r\n  // index of last item of current page\r\n  const lastContentIndex = page * contentPerPage;\r\n  // index of first item of current page\r\n  const firstContentIndex = lastContentIndex - contentPerPage;\r\n\r\n  const changePage = (direction: boolean) => {\r\n    setPage((state) => {\r\n      // move forward\r\n      if (direction) {\r\n        // if page is the last page, do nothing\r\n        if (state === pageCount) {\r\n          return state;\r\n        }\r\n        return state + 1;\r\n        // go back\r\n      } else {\r\n        // if page is the first page, do nothing\r\n        if (state === 1) {\r\n          return state;\r\n        }\r\n        return state - 1;\r\n      }\r\n    });\r\n  };\r\n\r\n  const setPageSAFE = (num: number) => {\r\n    // if number is greater than number of pages, set to last page\r\n    if (num > pageCount) {\r\n      setPage(pageCount);\r\n      // if number is less than 1, set page to first page\r\n    } else if (num < 1) {\r\n      setPage(1);\r\n    } else {\r\n      setPage(num);\r\n    }\r\n  };\r\n\r\n  return {\r\n    totalPages: pageCount,\r\n    nextPage: () => changePage(true),\r\n    prevPage: () => changePage(false),\r\n    setPage: setPageSAFE,\r\n    firstContentIndex,\r\n    lastContentIndex,\r\n    page,\r\n  };\r\n};\r\n\r\nexport default usePagination;"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAG,QAA+B;EAAA;;EAAA,IAA9B;IAAEC,cAAF;IAAkBC;EAAlB,CAA8B;EACnD,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAD,CAAhC,CADmD,CAEnD;;EACA,MAAMM,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGD,cAAlB,CAAlB,CAHmD,CAInD;;EACA,MAAMO,gBAAgB,GAAGL,IAAI,GAAGF,cAAhC,CALmD,CAMnD;;EACA,MAAMQ,iBAAiB,GAAGD,gBAAgB,GAAGP,cAA7C;;EAEA,MAAMS,UAAU,GAAIC,SAAD,IAAwB;IACzCP,OAAO,CAAEQ,KAAD,IAAW;MACjB;MACA,IAAID,SAAJ,EAAe;QACb;QACA,IAAIC,KAAK,KAAKP,SAAd,EAAyB;UACvB,OAAOO,KAAP;QACD;;QACD,OAAOA,KAAK,GAAG,CAAf,CALa,CAMb;MACD,CAPD,MAOO;QACL;QACA,IAAIA,KAAK,KAAK,CAAd,EAAiB;UACf,OAAOA,KAAP;QACD;;QACD,OAAOA,KAAK,GAAG,CAAf;MACD;IACF,CAhBM,CAAP;EAiBD,CAlBD;;EAoBA,MAAMC,WAAW,GAAIC,GAAD,IAAiB;IACnC;IACA,IAAIA,GAAG,GAAGT,SAAV,EAAqB;MACnBD,OAAO,CAACC,SAAD,CAAP,CADmB,CAEnB;IACD,CAHD,MAGO,IAAIS,GAAG,GAAG,CAAV,EAAa;MAClBV,OAAO,CAAC,CAAD,CAAP;IACD,CAFM,MAEA;MACLA,OAAO,CAACU,GAAD,CAAP;IACD;EACF,CAVD;;EAYA,OAAO;IACLC,UAAU,EAAEV,SADP;IAELW,QAAQ,EAAE,MAAMN,UAAU,CAAC,IAAD,CAFrB;IAGLO,QAAQ,EAAE,MAAMP,UAAU,CAAC,KAAD,CAHrB;IAILN,OAAO,EAAES,WAJJ;IAKLJ,iBALK;IAMLD,gBANK;IAOLL;EAPK,CAAP;AASD,CAlDD;;GAAMH,a;;AAoDN,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}